package com.csds393.yacht.calendar

import androidx.room.*
import androidx.room.ForeignKey.CASCADE
import java.time.*

/**
 * Represents an event that re-occurs on a predictable schedule.
 * Concrete instances of CalendarEvent can be generated by providing a window of time
 * Currently only supports events separated by a whole number of days.
 * @property activeWindow  the window of time when this event re-occurs
 */
@Entity(tableName = "recurring_events")
data class RecurringCalendarEvent(
    @Embedded
    val eventBase: CalendarEvent,
    val activeWindow: ClosedRange<LocalDate>,
    val datePattern: DatePattern,
    @PrimaryKey(autoGenerate = true)
    val rec_id: Int? = null,
) {
    @delegate:Ignore
    private val duration: Period by lazy { with(eventBase) { startDate.until(endDate) } }

    fun details(): CalendarEvent.Details = eventBase.details

    /** Generates the list of occurrences of this recurring event that occur in [window] */
    fun generateEventsBetween(window: ClosedRange<LocalDate>, exceptions: Collection<LocalDate> = setOf()) =
        datePattern.getOccurrencesInWindows(window, activeWindow)
            .filterNot { it in exceptions }
                // negative id to distinguish from normal events' ids
            .map { eventBase.copy(startDate = it, endDate = it.plus(duration), id = -rec_id!!) }

    /** Returns whether at least one instance of this recurring event occurs in [window] */
    fun occursWithinWindow(window: ClosedRange<LocalDate>): Boolean {
        // Strict lower-bound of soonest occurrence
        val soonestDate = datePattern.nextOccurrenceFrom(maxOf(window.start, activeWindow.start))
        val latestDate = minOf(window.endInclusive, activeWindow.endInclusive)
        return !soonestDate.isAfter(latestDate)
    }
    @Entity(
        tableName = "recurrence_exceptions",
        primaryKeys = ["date", "event_id"],
//        TODO refactor s.t. foreign-key constraint is upheld
//        foreignKeys = [ForeignKey(
//            entity = RecurringCalendarEvent::class,
//            parentColumns = ["id"],
//            childColumns = ["event_id"],
//            onUpdate = CASCADE,
//            onDelete = CASCADE,
//        )]
    )
    /** An excluded [date] for a recurring event */
    data class Exception(val date: LocalDate, val event_id: Int)

}
